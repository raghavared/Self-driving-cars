from math import sin, cos, tan, atan2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

class Bicycle():
    def __init__(self):
        self.xc = 0
        self.yc = 0
        self.theta = 0
        self.delta = 0
        self.beta = 0
        
        self.L = 2
        self.lr = 1.2
        self.w_max = 1.22
        
        self.sample_time = 0.01
        
    def reset(self):
        self.xc = 0
        self.yc = 0
        self.theta = 0
        self.delta = 0
        self.beta = 0





class Bicycle(Bicycle):
    def step(self, v, w):
        # ==================================
        #  Implement kinematic model here
        # ==================================
        xc_dot = v * cos(self.theta + self.beta)
        yc_dot = v * sin(self.theta + self.beta)
        theta_dot = v * cos(self.beta) * tan(self.delta) / self.L
        delta_dot = max(-self.w_max, min(self.w_max, w))
        self.xc += xc_dot * self.sample_time
        self.yc += yc_dot * self.sample_time
        self.theta += theta_dot * self.sample_time
        self.delta += delta_dot * self.sample_time
        self.beta = atan2(self.lr * tan(self.delta), self.L)






sample_time = 0.01
time_end = 20
model = Bicycle()

# set delta directly
model.delta = np.arctan(2/10)

t_data = np.arange(0, time_end, sample_time)
x_data = np.zeros_like(t_data)
y_data = np.zeros_like(t_data)

for i in range(t_data.shape[0]):
    x_data[i] = model.xc
    y_data[i] = model.yc
    model.step(np.pi, 0)
    
plt.axis('equal')
plt.plot(x_data, y_data, label='Learner Model')
plt.legend()
plt.show()











sample_time = 0.01
time_end = 20
model.reset()

t_data = np.arange(0, time_end, sample_time)
x_data = np.zeros_like(t_data)
y_data = np.zeros_like(t_data)

for i in range(t_data.shape[0]):
    x_data[i] = model.xc
    y_data[i] = model.yc
    
    if model.delta < np.arctan(2/10):
        model.step(np.pi, model.w_max)
    else:
        model.step(np.pi, 0)  

plt.axis('equal')
plt.plot(x_data, y_data, label='Learner Model')
plt.legend()
plt.show()









sample_time = 0.01
time_end = 60
model.reset()

t_data = np.arange(0,time_end,sample_time)
x_data = np.zeros_like(t_data)
y_data = np.zeros_like(t_data)

# maintain velocity at 4 m/s
v_data = np.zeros_like(t_data)
v_data[:] = 4 

w_data = np.zeros_like(t_data)

# ==================================
#  Square Path: set w at corners only
# ==================================
'''
w_data[670:670+100] = 0.753
w_data[670+100:670+100*2] = -0.753
w_data[2210:2210+100] = 0.753
w_data[2210+100:2210+100*2] = -0.753
w_data[3670:3670+100] = 0.753
w_data[3670+100:3670+100*2] = -0.753
w_data[5220:5220+100] = 0.753
w_data[5220+100:5220+100*2] = -0.753
'''

# ==================================
#  Spiral Path: high positive w, then small negative w
# ==================================
'''
w_data[:] = -1/100
w_data[0:100] = 1
'''

# ==================================
#  Wave Path: square wave w input
# ==================================
#w_data[:] = 0
#w_data[0:100] = 1
#w_data[100:300] = -1
#w_data[300:500] = 1
#w_data[500:5700] = np.tile(w_data[100:500], 13)
#w_data[5700:] = -1

# ==================================
#  Step through bicycle model
# ==================================
for i in range(t_data.shape[0]):
    x_data[i] = model.xc
    y_data[i] = model.yc
    model.step(v_data[i], w_data[i])
    
plt.axis('equal')
plt.plot(x_data, y_data, label='Learner Model')
plt.legend()
plt.show()











path_radius = 8
sample_time = 0.01
time_end = 30
model.reset()

t_data = np.arange(0, time_end, sample_time)
x_data = np.zeros_like(t_data)
y_data = np.zeros_like(t_data)
v_data = np.zeros_like(t_data)
w_data = np.zeros_like(t_data)

# ==================================
#  Learner solution begins here
# ==================================
n = t_data.shape[0]
max_delta = 0.993*atan2(model.L, path_radius)
v_data[:] = 4 * np.pi * path_radius / time_end
#model.delta = max_delta
#w_data[n//8-50:n//8+50] = -2 * max_delta
#w_data[5*n//8-50:5*n//8+50] = 2 * max_delta
for i in range(n):
    x_data[i] = model.xc
    y_data[i] = model.yc
    if i < n/8 and model.delta < max_delta:
        w_data[i] = model.w_max
    elif n/8 < i < 5*n/8 and model.delta > -max_delta:
        w_data[i] = -model.w_max
    elif i > 5*n/8 and model.delta < max_delta:
        w_data[i] = model.w_max
    model.step(v_data[i], w_data[i])
    
# ==================================
#  Learner solution ends here
# ==================================
plt.axis('equal')
plt.plot(x_data, y_data)
plt.show()









data = np.vstack([t_data, v_data, w_data]).T
np.savetxt('figure8.txt', data, delimiter=', ')









sample_time = 0.01
time_end = 30
model.reset()

t_data = np.arange(0,time_end,sample_time)
x_data = np.zeros_like(t_data)
y_data = np.zeros_like(t_data)
v_data = np.zeros_like(t_data)
w_data = np.zeros_like(t_data)

# ==================================
#  Test various inputs here
# ==================================
for i in range(t_data.shape[0]):

    model.step(v_data[i], w_data[i])
    
plt.axis('equal')
plt.plot(x_data, y_data)
plt.show()





